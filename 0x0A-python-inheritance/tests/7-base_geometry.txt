========================================
The ```7-base_geometry``` module
========================================

Using ```BaseGeometry```
----------------------------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", [1])
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", (1, 2))
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 65.5)
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("distance", 15467897654329999)

>>> bg.integer_validator("distance", 0)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.integer_validator("", 12)

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(7, 12)

>>> bg.integer_validator("", 12, 7)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bg.integer_validator("nope", 12)

>>> bg.integer_validator("none", [1, 2, 7])
Traceback (most recent call last):
...
TypeError: none must be an integer
